// Generated by CodiumAI

describe('mostrarFormulario_function', () => {

});

    // Tests that the function generates the correct HTML elements for text input type
    it('generates HTML elements for text input type', () => {
        const addQuestion = document.createElement('div');
        mostrarFormulario();
        const input = addQuestion.querySelector('input[type=text]');
        expect(input).toBeTruthy();
    });



describe('cargarFormularios_function', () => {
});

    // Tests that the function properly populates the form with questions
    it('populates form with questions', () => {
        // Arrange
        const expectedQuestions = 3;
        const addQuestion = document.createElement('div');
        const question = [
            {
                type: 'text',
                texto: 'Question 1',
                placeholder: 'Enter your answer',
                id: 'question1'
            },
            {
                type: 'select',
                texto: 'Question 2',
                placeholder: 'Select an option',
                id: 'question2'
            },
            {
                type: 'button',
                texto: 'Add response',
                id: 'addResponse'
            }
        ];
        // Act
        mostrarFormulario(addQuestion, question);
        const actualQuestions = addQuestion.querySelectorAll('.form-label').length;
        // Assert
        expect(actualQuestions).toBe(expectedQuestions);
    });


    // Tests that the function 'cargarFormularios' properly loads and displays form data from the Firestore database.
    it('should load and display form data from Firestore database', () => {
        // Mocking the Firestore database
        const mockData = {
            data: () => ({
                varemoMedicion: ['varemo1', 'varemo2'],
                preguntas: [
                    {
                        pregunta: 'pregunta1',
                        Respuestas: ['respuesta1', 'respuesta2']
                    },
                    {
                        pregunta: 'pregunta2',
                        Respuestas: ['respuesta3', 'respuesta4']
                    }
                ],
                nombre: 'nombreFormulario'
            })
        };
        const mockOnSnapshot = jest.fn().mockImplementation((doc, callback) => {
            callback(mockData);
        });
        const mockDoc = jest.fn().mockReturnValue({ onSnapshot: mockOnSnapshot });
        const mockDb = { doc: mockDoc };
        const originalDb = db;
        db = mockDb;

        // Mocking the DOM
        document.body.innerHTML = '<div id="nombreFormulario"></div><select id="varemo"></select><select id="dPregunta"></select><select id="dRespuesta"></select>';

        // Calling the function
        cargarFormularios();

        // Expectations
        expect(document.getElementById('nombreFormulario').innerHTML).toBe('nombreFormulario');
        expect(document.getElementById('varemo').innerHTML).toBe('<option selected="" disabled="" value="false">Varemo de medicion</option><option value="0" class="seleccionar">varemo1</option><option value="1" class="seleccionar">varemo2</option>');
        expect(document.getElementById('dPregunta').innerHTML).toBe('<option value="0" class="seleccionar">pregunta1</option><option value="1" class="seleccionar">pregunta2</option>');
        expect(document.getElementById('dRespuesta').innerHTML).toBe('<option value="0" class="seleccionar">respuesta1</option><option value="1" class="seleccionar">respuesta2</option>');

        // Restoring the original values
        db = originalDb;
    });


    // Tests that the selectVaremo element is populated with a single disabled option when there are no varemo options in the form
    it('populates selectVaremo with a single disabled option', () => {
      const selectVaremo = document.createElement('select');
      const doc = {
        data: () => ({
          varemoMedicion: []
        })
      };
      cargarFormularios(selectVaremo, doc);
      expect(selectVaremo.innerHTML).toBe('<option selected disabled value="false">Varemo de medicion</option>');
    });


    // Tests that the function properly handles the case where there are no questions in the form
    it('properly handles case where there are no questions in the form', () => {
      const doc = {
        data: () => ({
          varemoMedicion: [],
          preguntas: undefined,
          nombre: 'Test Form'
        })
      };
      const onSnapshotMock = jest.fn((doc, callback) => callback(doc));
      const selectVaremo = {
        innerHTML: '<option selected disabled value="false">Varemo de medicion</option>'
      };
      const preguntaDepende = {
        innerHTML: ''
      };
      const respuestaDepende = {
        innerHTML: ''
      };

      cargarFormularios();

      expect(onSnapshotMock).toHaveBeenCalled();
      expect(selectVaremo.innerHTML).toEqual('<option selected disabled value="false">Varemo de medicion</option>');
      expect(preguntaDepende.innerHTML).toEqual('');
      expect(respuestaDepende.innerHTML).toEqual('');
    });


    // Tests that the event listener for adding a response is properly added to the button element
    it('should add an event listener to the button element', () => {
        const btnRespuesta = document.getElementById('btnGuardarRespuesta');
        const addEventListenerSpy = jest.spyOn(btnRespuesta, 'addEventListener');
        cargarFormularios();
        expect(addEventListenerSpy).toHaveBeenCalledWith('click', expect.any(Function));
    });


    // Tests that the response dependent on question is not generated when there are no dependent responses for a question
    it('test behaviour when there are no dependent responses', () => {
      const docData = {
        varemoMedicion: ['varemo1', 'varemo2'],
        preguntas: [
          {
            pregunta: 'pregunta1',
            Respuestas: ['respuesta1', 'respuesta2']
          },
          {
            pregunta: 'pregunta2',
            Respuestas: []
          }
        ],
        nombre: 'nombreFormulario'
      };
      const doc = {
        data: () => docData
      };
      const onSnapshot = (doc, callback) => callback(doc);
      const db = {
        collection: () => ({
          doc: () => ({
            onSnapshot
          })
        })
      };
      global.document.getElementById = jest.fn().mockReturnValue({});
      global.localStorage.getItem = jest.fn().mockReturnValue('formId');
      const { cargarFormularios } = require('./index');
      cargarFormularios();
      expect(document.getElementById).toHaveBeenCalledTimes(4);
    });


    // Tests that the function correctly displays the name of the form
    it('displays form name correctly', () => {
        const nameForm = document.getElementById("nombreFormulario");
        const formName = "Test Form";
        const mockData = {
            data: () => ({
                nombre: formName
            })
        };
        const mockDoc = {
            data: mockData.data
        };
        const mockDb = {
            data: mockData.data,
            onSnapshot: (doc, callback) => {
                callback(mockDoc);
            }
        };
        const originalDb = db;
        db = mockDb;
        cargarFormularios();
        expect(nameForm.innerHTML).toBe(formName);
        db = originalDb;
    });


    // Tests that when a varemo option is deleted, the corresponding data is removed from the form data in Firestore
    it('deletes varemo option from form data', async () => {
      const mockData = {
        data: () => ({
          varemoMedicion: ['option1', 'option2', 'option3'],
          preguntas: []
        })
      };
      const mockUpdateData = jest.fn();
      const mockOnSnapshot = jest.fn((doc, callback) => {
        callback(mockData);
      });
      const mockDoc = jest.fn(() => ({
        updateData: mockUpdateData,
        onSnapshot: mockOnSnapshot
      }));
      const mockDb = {
        doc: mockDoc
      };
      global.db = mockDb;
      global.arrayRemove = jest.fn((option) => {
        mockData.data().varemoMedicion = mockData.data().varemoMedicion.filter((varemo) => varemo !== option);
      });

      await cargarFormularios();
      const deleteBtn = document.querySelector('.eliminar');
      deleteBtn.click();

      expect(mockUpdateData).toHaveBeenCalledWith(mockDoc(), { varemoMedicion: ['option1', 'option3'] }, 'formularios');
    });


    // Tests that the form data is updated when a dependent response is added
    it('updates form data when a dependent response is added', async () => {
      const mockDoc = {
        data: () => ({
          varemoMedicion: [],
          preguntas: [
            {
              pregunta: 'pregunta 1',
              Respuestas: ['respuesta 1', 'respuesta 2']
            },
            {
              pregunta: 'pregunta 2',
              Respuestas: ['respuesta 3', 'respuesta 4']
            }
          ],
          nombre: 'test form'
        }),
        id: 'test-id'
      };
      const mockUpdateData = jest.fn();
      const mockOnSnapshot = jest.fn((doc, callback) => callback(mockDoc));
      const cargarFormularios = proxyquire('../../services/crudservice.js', {
        './crudservice.js': {
          updateData: mockUpdateData,
          onSnapshot: mockOnSnapshot
        }
      }).cargarFormularios;

      await cargarFormularios();
      const btnRespuesta = document.getElementById('btnGuardarRespuesta');
      const inpRespuesta = document.getElementById('inpRespuestas');

      btnRespuesta.click();

      expect(mockUpdateData).toHaveBeenCalledWith('test-id', {
        varemoMedicion: [],
        preguntas: [
          {
            pregunta: 'pregunta 1',
            Respuestas: ['respuesta 1', 'respuesta 2']
          },
          {
            pregunta: 'pregunta 2',
            Respuestas: ['respuesta 3', 'respuesta 4']
          },
          {
            respuesta: inpRespuesta.value
          }
        ],
        nombre: 'test form'
      }, 'formularios');
    });

